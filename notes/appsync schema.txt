"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service which subscriptions will be published to when this mutation is called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on OBJECT | FIELD_DEFINITION

type Query {
  getUserHomes: [Home]
  getUserDevices: [Device]
  getUserByEmail(Email: String!): User
  getHomeById(id: String!): Home
  getDeviceById(id: String!): Device
}

type Home {
  email: String!
  operationtype: String
  homeid: String
  homename: String
  isshared: Boolean
  ownerhome: String
  sharedbyname: String
  useraccesslevel: String
  useraccesslevelstatus: String
  shareddate: String
  sharedwith: String
  updatesharedbyname: String
  updateshareddate: String
  deleteshareddate: String
  disableshareddate: String
  acceptrejectdate: String
  acceptreject: String
  enableshareddate: String
}

type Device {
  email: String!
  operationtype: String
  deviceid: String
  devicename: String
  batterypercentage: Int
  firmwareversion: String
  devicestatus: String
  batterystate: String
  issyncsuccess: Boolean
  failurereason: String
  lockmqresponse: String
  productfamily: String
  sku: String
  devicetimezone: String
  modelnumber: String
  locktamperstate: String
  securemodeenabled: String
  securemodeactive: String
  audiostatus: String
  securescreenstatus: String
  doubletapstatus: String
  ledstatus: String
  autolockstate: String
  autolockdelay: String
}

type User {
  email: String!
  operationtype: String
  firstname: String
  lastname: String
  phonenumber: String
  accountenabled: String
  brandname: String
}

type Mutation {
  manageDevice(email: String!, operationtype: String!, deviceid: String!, devicename: String, batterypercentage: Int, firmwareversion: String, devicestatus: String, batterystate: String, issyncsuccess: Boolean, failurereason: String, lockmqresponse: String, productfamily: String, sku: String, devicetimezone: String, modelnumber: String, locktamperstate: String, securemodeenabled: String, securemodeactive: String, audiostatus: String, securescreenstatus: String, doubletapstatus: String, ledstatus: String, autolockstate: String, autolockdelay: String): Device
  manageUser(email: String!, operationtype: String!, firstname: String, lastname: String, phonenumber: String, accountenabled: String, brandname: String): User
  manageHome(email: String!, operationtype: String!, homeid: String!, homename: String, isshared: Boolean, ownerhome: String, sharedbyname: String, useraccesslevel: String, useraccesslevelstatus: String, shareddate: String, sharedwith: String, updatesharedbyname: String, updateshareddate: String, deleteshareddate: String, disableshareddate: String, acceptrejectdate: String, acceptreject: String, enableshareddate: String): Home
}

type Subscription {
  onManageDevice(email: String!): Device
  onManageUser(email: String!): User
  onManageHome(email: String!): Home
}